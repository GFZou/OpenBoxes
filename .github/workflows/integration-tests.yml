name: Integration tests

on:
  pull_request:
    branches: [ develop ]
  push:
    branches: [ develop ]

jobs:
  build:
    env:
      DB_DATABASE: gha_integration_tests
      DB_PASSWORD: root
      DB_USER: root
      JAVA_TOOL_OPTIONS: -Dstringchararrayaccessor.disabled=true
      OPENBOXES_PASSWORD: openboxes
      OPENBOXES_USER: openboxes

    runs-on: ubuntu-latest

    steps:

    - name: checkout source
      uses: actions/checkout@v3

    - name: configure java 7
      uses: actions/setup-java@v3
      with:
        distribution: 'zulu'
        java-version: 7

    - name: configure node 14
      uses: actions/setup-node@v3
      with:
        node-version: 14

    - name: initialize MySQL
      run: |
        sudo systemctl start mysql.service
        mysql -p${{ env.DB_PASSWORD }} -u${{ env.DB_USER }} -e '
          drop database if exists ${{ env.DB_DATABASE }};
          create database ${{ env.DB_DATABASE }} default charset utf8;
          create user "${{ env.OPENBOXES_USER }}"@"localhost" identified by "${{ env.OPENBOXES_PASSWORD }}";
          grant all privileges on ${{ env.DB_DATABASE }}.* to "${{ env.OPENBOXES_USER }}"@"localhost";
          flush privileges;'

    - name: 'load ~/.grails cache'
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-v3-grails-${{ hashFiles('**/grails-app/conf/BuildConfig.groovy') }}
        path: ~/.grails

    - id: grails-sdk
      name: 'load ~/grails-1.3.9 cache'
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-v3-grails-1.3.9-${{ hashFiles('**/grails-app/conf/BuildConfig.groovy') }}
        path: ~/grails-1.3.9

    - name: 'load ~/.ivy2/ cache'
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-v3-ivy2-${{ hashFiles('**/grails-app/conf/BuildConfig.groovy') }}
        path: ~/.ivy2

    - name: 'load ${{ ''$GITHUB_WORKSPACE'' }}/node_modules cache'
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-v3-node_modules-${{ hashFiles('**/package-lock.json') }}
        path: ${{ github.workspace }}/node_modules

    - name: 'load ~/.npm cache'
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-v3-npm-${{ hashFiles('**/package-lock.json') }}
        path: ~/.npm

    - id: sdkman
      if: steps.grails-sdk.outputs.cache-hit != 'true'
      name: download grails SDK (unless cached)
      uses: sdkman/sdkman-action@master
      with:
        candidate: grails
        version: 1.3.9

    - if: steps.grails-sdk.outputs.cache-hit != 'true'
      name: unzip grails SDK (unless cached)
      run: unzip -o ${{ steps.sdkman.outputs.file }} -d ~/

    - name: npm install
      run: npm install

    - name: npm rebuild node-sass
      run: npm rebuild node-sass

    - name: npm run bundle
      run: npm run bundle

    - name: configure OpenBoxes for database access and testing
      run: |
        mkdir -p ~/.grails
        echo "dataSource.password=${{ env.OPENBOXES_PASSWORD }}" > ~/.grails/openboxes-config.properties
        echo "dataSource.url=jdbc:mysql://localhost:3306/${{ env.DB_DATABASE }}?allowPublicKeyRetrieval=true&useSSL=false" >> ~/.grails/openboxes-config.properties
        echo "dataSource.username=${{ env.OPENBOXES_USER }}" >> ~/.grails/openboxes-config.properties
        echo "openboxes.fixtures.enabled=true" >> ~/.grails/openboxes-config.properties
        echo "openboxes.jobs.dataCleaningJob.enabled=false" >> ~/.grails/openboxes-config.properties
        echo "openboxes.jobs.refreshDemandDataJob.enabled=false" >> ~/.grails/openboxes-config.properties
        echo "openboxes.jobs.refreshInventorySnapshotJob.enabled=false" >> ~/.grails/openboxes-config.properties
        #
        # FIXME Strangely, enabled = false doesn't disable refreshProductAvailabilityJob,
        # FIXME but setting delayInMilliseconds to a high value has the same practical effect.
        #
        echo "openboxes.jobs.refreshProductAvailabilityJob.enabled=false" >> ~/.grails/openboxes-config.properties
        echo "openboxes.jobs.refreshProductAvailabilityJob.delayInMilliseconds=3600000" >> ~/.grails/openboxes-config.properties
        echo "openboxes.refreshAnalyticsDataOnStartup.enabled=false" >> ~/.grails/openboxes-config.properties

      #
      # Liquibase migrations from scratch are very, very slow. For performance,
      # this step pre-loads mysqldump output from a clean install of a recent
      # OpenBoxes release. Technically, this step is optional in the sense that
      # later steps would automatically run all the necessary migrations if it
      # were removed. But those migrations would certainly take hours, and almost
      # certainly fail with out-of-memory errors.
      #
    - name: preload empty database (v0.8.18-hotfix3)
      run: |
        gunzip -c ${{ github.workspace }}/test/data/preload.tgz | tar xvf -
        mysql -p${{ env.DB_PASSWORD }} -u${{ env.DB_USER }} "${{ env.DB_DATABASE}}" < preload_schema.sql
        mysql -p${{ env.DB_PASSWORD }} -u${{ env.DB_USER }} "${{ env.DB_DATABASE}}" < preload_data.sql

      # if this step fails midway through, the next will pick up where it left off
    - continue-on-error: true
      name: grails compile
      run: ~/grails-1.3.9/bin/grails compile

    - name: 'grails test-app integration:'
      run: '~/grails-1.3.9/bin/grails test-app integration: --non-interactive -echoOut -echoErr'
