/**
 * Copyright (c) 2022 Partners In Health.  All rights reserved.
 * The use and distribution terms for this software are covered by the
 * Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
 * which can be found in the file epl-v10.html at the root of this distribution.
 * By using this software in any fashion, you are agreeing to be bound by
 * the terms of this license.
 * You must not remove this notice, or any other, from this software.
 */

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

buildscript {
    configurations.all {
        /*
         * Without this intervention, gradle-git-properties will pull in
         * a version of JGit that requires Java 11+, but we use 8; see
         * https://github.com/n0mer/gradle-git-properties/issues/195
         */
        resolutionStrategy.force 'org.eclipse.jgit:org.eclipse.jgit:5.13.1.202206130422-r'
    }
    dependencies {
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:${assetPipelineVersion}"
        classpath "org.grails:grails-gradle-plugin:${grailsVersion}"
        classpath "org.grails.plugins:database-migration:${grailsDatabaseMigrationVersion}"
    }
    repositories {
        maven { url 'https://repo.grails.org/grails/core' }
    }
}

plugins {

    id 'application'
    id 'eclipse'
    id 'groovy'
    id 'idea'
    id 'project-report'
    id 'war'

    // git magic: releases past v2.3.0 require Gradle 5.1+
    id 'com.gorylenko.gradle-git-properties' version '2.2.4'

    id 'com.moowork.node' version '1.3.1'  // enables `node` block below

    // resolves a Windows-specific build issue
    id 'com.virgo47.ClasspathJar' version '1.0.0'
}

apply plugin: 'asset-pipeline'  // enables `assets` block, but see deps below
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'org.grails.grails-web'

group 'com.openboxes'
mainClassName = 'org.pih.warehouse.Application'
sourceCompatibility = 1.8
version '0.9.0-SNAPSHOT'

assetCompile.dependsOn(['npmInstall', 'npm_run_bundle'])
assets {
    excludes = [
        '**/bundle.*.css',
        '**/bundle.*.js',
    ]
    minifyOptions = [
        languageMode: 'ES6',
        optimizationLevel: 'SIMPLE',
        targetLanguage: 'ES5',
    ]
}

bootRun {
    addResources = true
    dependsOn = ['npmInstall', 'npm_run_bundle']
    jvmArgs = [
        '-Dspring.output.ansi.enabled=always',
        '-Xdebug',
        '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005'
    ]
    systemProperties System.properties
}

dependencyManagement {
    imports {
        mavenBom "org.grails:grails-bom:${grailsVersion}"
    }
    applyMavenExclusions true
}

node {
    distBaseUrl = 'https://nodejs.org/dist'
    download = true
    npmVersion = '6.14.17'
    version = '14.20.0'
}

repositories {
    mavenCentral()
    maven { url 'https://repo.grails.org/grails/core' }
    // deprecated: only needed for two dependencies (barcode4j, google-analytics)
    maven { url 'https://repo.grails.org/grails/plugins' }
}

/*
 * Add migrations to `sourceSets` *before* introducing liquibase dependencies.
 * See https://grails.github.io/grails-database-migration/3.1.0/index.html.
 */
sourceSets {
    main {
        resources {
            srcDir 'grails-app/migrations'
        }
    }
}

springBoot {
    mainClass = 'org.pih.warehouse.Application'
}

war {
    archiveName = 'openboxes.war'
}

dependencies {

    // manage static assets: see https://github.com/bertramdev/asset-pipeline#documentation-1.
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineVersion}"
    assets "com.bertramlabs.plugins:less-asset-pipeline:${assetPipelineVersion}"
    assets "com.bertramlabs.plugins:sass-asset-pipeline:${assetPipelineVersion}"

    // exposes javax.annotation.Nullable, com.google.common.base.Enums, etc.
    implementation 'com.google.guava:guava:31.1-jre'

    compile 'com.google.zxing:javase:3.5.0'  // barcode support

    testImplementation 'com.icegreen:greenmail:1.6.9'  // MailServiceTests

    // see https://www.mchange.com/projects/c3p0/#quickstart
    implementation 'com.mchange:c3p0:0.9.5.5'
    implementation 'com.mchange:mchange-commons-java:0.2.20'

    implementation 'commons-beanutils:commons-beanutils:1.9.4'
    implementation 'commons-fileupload:commons-fileupload:1.4'
    implementation 'commons-lang:commons-lang:2.6'  // FIXME update to commons-lang3

    compile "fr.opensagres.xdocreport:xdocreport:${xDocReportVersion}"
    implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter.docx.docx4j:${xDocReportVersion}"

    // FIXME assess which, if any, of these sub-dependencies are still needed
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter.docx.xwpf:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.converter.odt.odfdom:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.document:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.document.docx:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.document.odt:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.template:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.template.freemarker:${xDocReportVersion}"
    // implementation "fr.opensagres.xdocreport:fr.opensagres.xdocreport.template.velocity:${xDocReportVersion}"

    implementation 'fr.w3blog:zebra-zpl:0.0.3'  // ZebraUtils.printZpl(), Labelary API, etc.

    /*
     * FIXME Used in only one place: ApiControllerFunctionalSpec.groovy.
     * FIXME Use apache's httpclient instead.
     */
    testCompile 'io.micronaut:micronaut-http-client:1.0.0.RC3'

    /*
     * FIXME Version 8.0.23+ changes an API Liquibase <=3.10.3 depends on.
     *
     * https://github.com/liquibase/liquibase/issues/1639
     *
     * Once Liquibase 3.10.4 is out, we can use later versions, and remove
     * the `serverTimezone=UTC` arguments in our jdbc:mysql: strings.
     *
     * N.B. the 8 here refers to Java's release, not to MySQL's: this
     * is the correct library to use to access MySql 5.7 from Java 8.
     */
    compile 'mysql:mysql-connector-java:8.0.22'

    testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitVersion}"

    implementation 'org.apache.commons:commons-csv:1.9.0'
    compile 'org.apache.commons:commons-email:1.5'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    compile 'org.apache.poi:poi:3.17'

    /*
     * Prevent java.sql.SQLException: No suitable driver found for jdbc:mysql://
     *
     * See https://tomcat.apache.org/tomcat-7.0-doc/jdbc-pool.html
     *
     * TODO do we need to specify an explicit version here?
     */
    runtime 'org.apache.tomcat:tomcat-jdbc'

    // enables `import groovy.sql.Sql`
    implementation 'org.codehaus.groovy:groovy-sql'

    // enables `import groovyx.gpars.GParsPool`, but consider grails-async-gpars?
    implementation 'org.codehaus.gpars:gpars:1.2.1'

    /*
     * We can't update docx4j without refactoring ReportService.groovy
     * to not use org.docx4j.org.xhtmlrenderer.pdf.ITextRenderer.
     */
    compile 'org.docx4j:docx4j:2.8.1'  // FIXME update to 8.3.x

    // required for GORM/hibernate validators
    compile 'org.glassfish.web:javax.el:2.2.5'

    // enables web ui to grails console (no source dependencies)
    runtime 'org.grails:grails-console'

    // this, or something in it, is needed for jodaTime plugin
    compile 'org.grails:grails-dependencies'

    // sets up grails log framework (uses logback under the hood)
    implementation 'org.grails:grails-logging'

    // enables `import grails.converters.JSON`
    implementation 'org.grails:grails-plugin-rest'

    // prevents Grails from thinking services are broken Domain objects
    implementation 'org.grails:grails-plugin-services'

    /*
    * Deprecated: use https://github.com/grails/grails-testing-support.
    *
    * Replace instances of, e.g., `import grails.test.mixin`.
    * See https://testing.grails.org/latest/guide/index.html#upgrading.
    */
    testCompile 'org.grails:grails-test-mixins:3.3.0'

    /*
     * Enables `import grails.testing.web.controllers.ControllerUnitTest`.
     * Using `testCompile` prevents integrationTestCompileClasspath warnings.
     */
    testCompile 'org.grails:grails-web-testing-support'

    // prevents java.lang.ClassNotFoundException for classes we don't directly consume
    implementation 'org.grails.plugins:async'

    // FIXME replace with com.google.zxing
    implementation 'org.grails.plugins:barcode4j:0.3'

    // enables userAgentIdentService.isMobile() and <browser:is*> tags
    implementation 'org.grails.plugins:browser-detection:3.4.0'

    // enables `import grails.plugin.cache.Cacheable`
    implementation 'org.grails.plugins:cache'

    // enables `grails test-app -coverage`
    testImplementation 'org.grails.plugins:code-coverage:2.0.3-3'

    implementation 'org.grails.plugins:csv:1.0.1'  // FIXME use commons-csv instead

    // enables liquibase migrations: not present in BOM, so we pin the version
    compile "org.grails.plugins:database-migration:${grailsDatabaseMigrationVersion}"

    implementation 'org.grails.plugins:excel-import:3.0.2'  // FIXME use commons-csv instead

    // enables `import geb.*`
    testCompile 'org.grails.plugins:geb'

    // enables <ga:*> tags, which we use only once
    implementation 'org.grails.plugins:google-analytics:2.3.3'

    // enables prettytime.display(), which we use only three times
    implementation 'org.grails.plugins:grails-pretty-time:4.0.0'

    // enables `import org.grails.plugins.web.taglib.*`
    implementation 'org.grails.plugins:gsp'

    // enables `import grails.orm, org.hibernate, org.springframework.orm`
    compile "org.grails.plugins:hibernate5:${gormVersion}"

    /*
     * FIXME Configure this properly.
     *
     * See https://plugins.grails.org/plugin/agorapulse/newrelic
     * and https://docs.newrelic.com/docs/new-relic-solutions/best-practices-guides/full-stack-observability/browser-monitoring-best-practices-java/
     */
    implementation 'org.grails.plugins:newrelic:5.2.0'

    // enables `import org.quartz.*`
    compile 'org.grails.plugins:quartz:2.0.13'

    // enables http://localhost:8080//quartz to list all scheduled jobs
    implementation 'org.grails.plugins:quartz-monitor:1.3'

    /*
     * FIXME Stop using grails.plugins.rendering.pdf.PdfRenderingService.
     *
     * Need `compile` here to pick up trans. deps. like RenderingTrait.
     */
    compile 'org.grails.plugins:rendering:2.0.3'

    /*
     * FIXME Configure this properly.
     *
     * See https://plugins.grails.org/plugin/agorapulse/sentry.
     */
    compile 'org.grails.plugins:sentry:11.7.25'

    /*
     * Enables `import org.hibernate.tool.schema.TargetType`.
     *
     * Be careful using more modern versions; using releases 5.3+ may raise
     * java.lang.ClassNotFoundException: org.hibernate.internal.util.xml.XMLHelper.
     *
     * We use the latest point release after 5.1.4, which GORM requests.
     */
    compile 'org.hibernate:hibernate-core:5.1.17.Final'
    compile 'org.hibernate:hibernate-ehcache:5.1.17.Final'

    // FIXME org.joda.time.* is redundant in Java 8
    implementation 'org.jadira.usertype:usertype.jodatime:2.0.1'

    // used in only one place: DocumentTemplateService.groovy
    implementation 'org.jxls:jxls:2.12.0'

    // see https://grails.github.io/grails-database-migration/3.1.0/index.html
    compile 'org.liquibase:liquibase-core:3.10.3'
    implementation 'org.liquibase.ext:liquibase-hibernate5:3.10.1'

    testCompile "org.seleniumhq.selenium:htmlunit-driver:${htmlUnitVersion}"
    testCompile "org.seleniumhq.selenium:selenium-api:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-chrome-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-firefox-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-ie-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-java:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-remote-driver:${seleniumVersion}"
    testCompile "org.seleniumhq.selenium:selenium-support:${seleniumVersion}"

    /*
     * Prevent 'Unable to start EmbeddedWebApplicationContext
     * due to missing EmbeddedServletContainerFactory bean.'
     */
    compile 'org.springframework.boot:spring-boot-starter-web'
}

/*
 * Update `.../META-INF/grails.build.info` after any successful build.
 */
buildProperties.doLast {
    File grailsBuildInfoFile = it.outputs.files.files.find {
        it.name == 'grails.build.info'
    }
    if (!grailsBuildInfoFile) {
        return  // nothing to do
    }

    Map<String, String> env = System.getenv()
    Properties properties = new Properties()
    grailsBuildInfoFile.withInputStream {
        properties.load(it)
    }

    properties.setProperty('build.host', InetAddress.localHost.hostName)
    properties.setProperty('build.java.version', System.getProperty('java.version'))
    properties.setProperty('build.tag', env.BUILD_TAG ?: 'N/A')
    properties.setProperty('build.time', LocalDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME))
    properties.setProperty('build.username', System.properties['user.name'])

    if (env.bamboo_buildNumber) {
        properties.setProperty('build.git.branch', env.bamboo_planRepository_branch)
        properties.setProperty('build.git.revision', env.bamboo_planRepository_revision)
        properties.setProperty('build.number', env.bamboo_buildNumber)
    }

    grailsBuildInfoFile.withOutputStream {
        properties.store(it, null)
    }
}

task prepareDocker(type: Copy, dependsOn: assemble) {
    description = 'Copy files from ./docker and openboxes.war to Docker temporal build directory'
    group = 'Docker'

    from 'build/libs/openboxes.war'
    from 'docker/Dockerfile'

    into mkdir("${buildDir}/docker")
}

tasks.withType(Test) {
    systemProperty 'geb.build.reportsDir', reporting.file('geb/integrationTest')
    systemProperty 'geb.env', System.getProperty('geb.env')
    systemProperty 'webdriver.chrome.driver', System.getProperty('webdriver.chrome.driver')
    systemProperty 'webdriver.firefox.driver', System.getProperty('webdriver.firefox.driver')
    testLogging {
        events 'failed', 'passed', 'skipped'
        exceptionFormat 'full'
    }
}
